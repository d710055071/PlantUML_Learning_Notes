@startuml
/'
    actor是在系统之外与系统交互的某人或某事物
    1.参与者位于边界之外
    2.参与者可以非人
    确定参与者:
        谁负责提供、使用或删除信息？
        谁将使用此功能？
        谁对某个特定功能感兴趣？
        在组织中的什么地方使用系统？
        谁负责支持和维护系统？
        系统有哪些外部资源？
        其他还有哪些系统将需要与该系统进行交互？
'/

actor       参与者
/'
    边界类是一种用于系统外部环境与其内部运作之间的交互进行建模的类
    这中交互包括转换事件，并记录系统表示方式中的变更
    在从需求向实现的转换过程中，任何两个有交互的关键对象之间都应当考虑建立边界类
    边界类的常用场景:
    1.参与者与用例之间应当建立边界类
    2.用例与用例之间如果有交互，应当为其建立边界类
    3.如果用例与系统边界之外的非人对象有交互，例如第三方系统，应当为其建立边界类
    4.在相关联的业务对象有明显独立性要求，即它们可能在各自的领域内发展和变化，
    但又希望互不影响时，也应当为它们建立边界类
    一个好的边界类应该具有以下特点:
    1.边界类应该有助于提供系统的可用性
    2.边界类应该尽可能地保持在较高的层次上
    3.边界类应该合理封装介于系统与主角之间的交互
    4.如果主角改变他们为系统提供输入的方式，边界类就应该是唯一需要改变的对象
    5.如果系统改变为主角提供输出的方式，边界类就应该是唯一需要改变的对象
    6.边界类必须”知道“其他对象类型的需求，以便它们能够得以实施，并相对于
    ”系统内部元素“保持其可用性和有效性
'/
boundary    边界类
/'
    控制类用于对一个或者几个用例所特有的控制行为进行建模 。控制对象(控制类的实例)
    通常控制其他对象，因此它们的行为具有协调性质。控制类将用例的特有行为进行封装。
    控制类来源于对用例场景中行为的定义，换句话说，控制类来源于对用例场景当中动词
    的分析和定义，包括限制动词的描述。
'/
control     控制类
/'
    实体类是用于对必须存储的信息和相关行为建模的类。实体对象(实体类的实例)
    用于保存和更新一些现象的有关信息。实体类通常是永久性的，它们所具有的属性
    和关系是长期需要的，有时甚至在系统的整个生存期都需要。
    实体类源于业务模型中的业务实体。很多时候可以直接把业务实体转化为实体类。
'/
entity      实体类

Database    数据库

参与者 -> 边界类 : To boundary
参与者 -> 控制类 : To control
参与者 -> 实体类 : To entity
参与者 -> 数据库 : To database
@enduml